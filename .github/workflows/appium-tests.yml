name: E2E tests
on:
  workflow_call:
    inputs:
      PLATFORM:
        type: string
        description: Specify the platform ( "ios" | "android" )
        required: true
      DEVICE:
        type: string
        description: Specify the device to run on (e.g. "iPhone 11")
        required: true
    secrets:
      EXPO_TOKEN:
        required: true

jobs:
  e2e-tests:
    name: Appium
    runs-on: macos-latest
    steps:
      - name: 🏗  Checkout repository
        uses: actions/checkout@v2

      - name: 📱  Show available iOS Simulators
        run: xcrun simctl list

      - name: Create and Run iOS Emulator
        if: ${{ inputs.PLATFORM == 'ios' }}
        run: |
          # open -a Simulator.app
          # sleep 20
          # xcrun simctl create test com.apple.CoreSimulator.SimDeviceType.iPhone-11 com.apple.CoreSimulator.SimRuntime.iOS-15-2 > deviceid.txt 
          # DEVICEUUID=`cat deviceid.txt`          

          DEVICEUUID="7CD4002D-C4E0-4334-9C3F-D237D701761F"

          echo $DEVICEUUID          
          echo "::set-output name=IPHONE_UUID::$(echo $DEVICEUUID)"
          # xcrun simctl boot $DEVICEUUID &
        id: simulator

      - name: 🏗  Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 14

      - name: 🏗 Setup Yarn
        run: npm install --g yarn

      - name: 📦  Cache dependencies
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: 📦  Install Node.js dependencies
        run: yarn install --frozen-lockfile --prefer-offline

      - name: 🏗  Setup Expo
        uses: expo/expo-github-action@v7
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: 🔗  Get current build url
        run: |
          eas build:list --buildProfile=development-sim --status=finished --platform=${{ inputs.PLATFORM }} --limit=1 --json > buildOutput.txt

          buildUrl=$(cat buildOutput.txt | sed -En 's/.*"buildUrl": "(.*)".*/\1/p')
          echo "::set-output name=BUILD_URL::$(echo $buildUrl)"
          echo $buildUrl
        id: url

      - name: 🏗  Download build
        if: ${{ inputs.PLATFORM == 'ios' }}
        uses: suisei-cn/actions-download-file@v1
        id: downloadedApp
        with:
          url: ${{ steps.url.outputs.BUILD_URL }}
          target: bin/

      - name: 📤  Untar app build
        if: ${{ inputs.PLATFORM == 'ios' }}
        run: |
          cd bin
          ls -a
          for f in *.tar.gz; do tar -xvf "$f"; done
          cd ..

      - name: 🏗  Start Appium Server
        run: yarn appium --log-timestamp --log-no-colors > appium-${{ inputs.PLATFORM }}.log &

      - name: Wait for Appium Server to Start
        run: |
          until $(curl --output /dev/null --silent --head --fail http://127.0.0.1:4723/wd/hub/sessions); do
            sleep 5
          done

      - name: 🧪  Spinup Android environment & run tests
        if: ${{ inputs.PLATFORM == 'android' }}
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          script: DEVICE="test" PLATFORM=android APP_URL=${{ steps.url.outputs.BUILD_URL }} yarn test:e2e:appium --forceExit

      - name: 🧪  Run Appium tests on iOS
        if: ${{ inputs.PLATFORM == 'ios' }}
        run: >
          APP_URL="$GITHUB_WORKSPACE/bin/easdetoxci.app"
          PLATFORM=ios
          DEVICE=test
          IPHONE_UUID="${{ steps.simulator.outputs.IPHONE_UUID }}"
          yarn test:e2e:appium --forceExit

      - name: Upload Appium logs
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: appium-${{ inputs.PLATFORM }}.log
          path: appium-${{ inputs.PLATFORM }}.log
